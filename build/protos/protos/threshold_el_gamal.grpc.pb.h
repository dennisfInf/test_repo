// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/threshold_el_gamal.proto
#ifndef GRPC_protos_2fthreshold_5fel_5fgamal_2eproto__INCLUDED
#define GRPC_protos_2fthreshold_5fel_5fgamal_2eproto__INCLUDED

#include "protos/threshold_el_gamal.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace el_gamal {

class DKG_Start final {
 public:
  static constexpr char const* service_full_name() {
    return "el_gamal.DKG_Start";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::el_gamal::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>> AsyncInit_DKG(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>>(AsyncInit_DKGRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>> PrepareAsyncInit_DKG(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>>(PrepareAsyncInit_DKGRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>* AsyncInit_DKGRaw(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>* PrepareAsyncInit_DKGRaw(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::el_gamal::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>> AsyncInit_DKG(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>>(AsyncInit_DKGRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>> PrepareAsyncInit_DKG(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>>(PrepareAsyncInit_DKGRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)>) override;
      void Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* AsyncInit_DKGRaw(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* PrepareAsyncInit_DKGRaw(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Init_DKG_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Init_DKG(::grpc::ServerContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Init_DKG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init_DKG() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Init_DKG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init_DKG(::grpc::ServerContext* /*context*/, const ::el_gamal::Start* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit_DKG(::grpc::ServerContext* context, ::el_gamal::Start* request, ::grpc::ServerAsyncResponseWriter< ::el_gamal::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Init_DKG<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Init_DKG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init_DKG() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::el_gamal::Start, ::el_gamal::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response) { return this->Init_DKG(context, request, response); }));}
    void SetMessageAllocatorFor_Init_DKG(
        ::grpc::MessageAllocator< ::el_gamal::Start, ::el_gamal::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::el_gamal::Start, ::el_gamal::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init_DKG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init_DKG(::grpc::ServerContext* /*context*/, const ::el_gamal::Start* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init_DKG(
      ::grpc::CallbackServerContext* /*context*/, const ::el_gamal::Start* /*request*/, ::el_gamal::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Init_DKG<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Init_DKG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init_DKG() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Init_DKG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init_DKG(::grpc::ServerContext* /*context*/, const ::el_gamal::Start* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init_DKG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init_DKG() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Init_DKG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init_DKG(::grpc::ServerContext* /*context*/, const ::el_gamal::Start* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit_DKG(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init_DKG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init_DKG() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init_DKG(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init_DKG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init_DKG(::grpc::ServerContext* /*context*/, const ::el_gamal::Start* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init_DKG(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init_DKG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init_DKG() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::el_gamal::Start, ::el_gamal::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::el_gamal::Start, ::el_gamal::Response>* streamer) {
                       return this->StreamedInit_DKG(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init_DKG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init_DKG(::grpc::ServerContext* /*context*/, const ::el_gamal::Start* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit_DKG(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::el_gamal::Start,::el_gamal::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Init_DKG<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Init_DKG<Service > StreamedService;
};

class DKG final {
 public:
  static constexpr char const* service_full_name() {
    return "el_gamal.DKG";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::el_gamal::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>> AsyncSend_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>>(AsyncSend_Commited_SharesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>> PrepareAsyncSend_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>>(PrepareAsyncSend_Commited_SharesRaw(context, request, cq));
    }
    virtual ::grpc::Status Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::el_gamal::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>> AsyncSend_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>>(AsyncSend_Participant_PKRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>> PrepareAsyncSend_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>>(PrepareAsyncSend_Participant_PKRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>* AsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>* PrepareAsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>* AsyncSend_Participant_PKRaw(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>* PrepareAsyncSend_Participant_PKRaw(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::el_gamal::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>> AsyncSend_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>>(AsyncSend_Commited_SharesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>> PrepareAsyncSend_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>>(PrepareAsyncSend_Commited_SharesRaw(context, request, cq));
    }
    ::grpc::Status Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::el_gamal::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>> AsyncSend_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>>(AsyncSend_Participant_PKRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>> PrepareAsyncSend_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>>(PrepareAsyncSend_Participant_PKRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)>) override;
      void Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)>) override;
      void Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* AsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* PrepareAsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* AsyncSend_Participant_PKRaw(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* PrepareAsyncSend_Participant_PKRaw(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Send_Commited_Shares_;
    const ::grpc::internal::RpcMethod rpcmethod_Send_Participant_PK_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response);
    virtual ::grpc::Status Send_Participant_PK(::grpc::ServerContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::el_gamal::Commited_Share* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Commited_Shares(::grpc::ServerContext* context, ::el_gamal::Commited_Share* request, ::grpc::ServerAsyncResponseWriter< ::el_gamal::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Send_Participant_PK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send_Participant_PK() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Send_Participant_PK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Participant_PK(::grpc::ServerContext* /*context*/, const ::el_gamal::Participant_Public_Key* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Participant_PK(::grpc::ServerContext* context, ::el_gamal::Participant_Public_Key* request, ::grpc::ServerAsyncResponseWriter< ::el_gamal::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Send_Commited_Shares<WithAsyncMethod_Send_Participant_PK<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::el_gamal::Commited_Share, ::el_gamal::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response) { return this->Send_Commited_Shares(context, request, response); }));}
    void SetMessageAllocatorFor_Send_Commited_Shares(
        ::grpc::MessageAllocator< ::el_gamal::Commited_Share, ::el_gamal::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::el_gamal::Commited_Share, ::el_gamal::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::el_gamal::Commited_Share* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Commited_Shares(
      ::grpc::CallbackServerContext* /*context*/, const ::el_gamal::Commited_Share* /*request*/, ::el_gamal::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Send_Participant_PK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send_Participant_PK() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::el_gamal::Participant_Public_Key, ::el_gamal::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response) { return this->Send_Participant_PK(context, request, response); }));}
    void SetMessageAllocatorFor_Send_Participant_PK(
        ::grpc::MessageAllocator< ::el_gamal::Participant_Public_Key, ::el_gamal::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::el_gamal::Participant_Public_Key, ::el_gamal::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send_Participant_PK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Participant_PK(::grpc::ServerContext* /*context*/, const ::el_gamal::Participant_Public_Key* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Participant_PK(
      ::grpc::CallbackServerContext* /*context*/, const ::el_gamal::Participant_Public_Key* /*request*/, ::el_gamal::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Send_Commited_Shares<WithCallbackMethod_Send_Participant_PK<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::el_gamal::Commited_Share* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Send_Participant_PK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send_Participant_PK() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Send_Participant_PK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Participant_PK(::grpc::ServerContext* /*context*/, const ::el_gamal::Participant_Public_Key* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::el_gamal::Commited_Share* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Commited_Shares(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send_Participant_PK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send_Participant_PK() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Send_Participant_PK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Participant_PK(::grpc::ServerContext* /*context*/, const ::el_gamal::Participant_Public_Key* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Participant_PK(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send_Commited_Shares(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::el_gamal::Commited_Share* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Commited_Shares(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send_Participant_PK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send_Participant_PK() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send_Participant_PK(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send_Participant_PK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Participant_PK(::grpc::ServerContext* /*context*/, const ::el_gamal::Participant_Public_Key* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Participant_PK(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::el_gamal::Commited_Share, ::el_gamal::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::el_gamal::Commited_Share, ::el_gamal::Response>* streamer) {
                       return this->StreamedSend_Commited_Shares(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::el_gamal::Commited_Share* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend_Commited_Shares(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::el_gamal::Commited_Share,::el_gamal::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send_Participant_PK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send_Participant_PK() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::el_gamal::Participant_Public_Key, ::el_gamal::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::el_gamal::Participant_Public_Key, ::el_gamal::Response>* streamer) {
                       return this->StreamedSend_Participant_PK(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send_Participant_PK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send_Participant_PK(::grpc::ServerContext* /*context*/, const ::el_gamal::Participant_Public_Key* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend_Participant_PK(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::el_gamal::Participant_Public_Key,::el_gamal::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Send_Commited_Shares<WithStreamedUnaryMethod_Send_Participant_PK<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Send_Commited_Shares<WithStreamedUnaryMethod_Send_Participant_PK<Service > > StreamedService;
};

class TEG final {
 public:
  static constexpr char const* service_full_name() {
    return "el_gamal.TEG";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::el_gamal::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>> AsyncInitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>>(AsyncInitDecryptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>> PrepareAsyncInitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>>(PrepareAsyncInitDecryptionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>* AsyncInitDecryptionRaw(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::el_gamal::Response>* PrepareAsyncInitDecryptionRaw(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::el_gamal::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>> AsyncInitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>>(AsyncInitDecryptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>> PrepareAsyncInitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>>(PrepareAsyncInitDecryptionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)>) override;
      void InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* AsyncInitDecryptionRaw(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* PrepareAsyncInitDecryptionRaw(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InitDecryption_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status InitDecryption(::grpc::ServerContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InitDecryption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitDecryption() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InitDecryption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDecryption(::grpc::ServerContext* /*context*/, const ::el_gamal::Ciphertext* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitDecryption(::grpc::ServerContext* context, ::el_gamal::Ciphertext* request, ::grpc::ServerAsyncResponseWriter< ::el_gamal::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InitDecryption<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InitDecryption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitDecryption() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::el_gamal::Ciphertext, ::el_gamal::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response) { return this->InitDecryption(context, request, response); }));}
    void SetMessageAllocatorFor_InitDecryption(
        ::grpc::MessageAllocator< ::el_gamal::Ciphertext, ::el_gamal::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::el_gamal::Ciphertext, ::el_gamal::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitDecryption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDecryption(::grpc::ServerContext* /*context*/, const ::el_gamal::Ciphertext* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitDecryption(
      ::grpc::CallbackServerContext* /*context*/, const ::el_gamal::Ciphertext* /*request*/, ::el_gamal::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InitDecryption<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InitDecryption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitDecryption() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InitDecryption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDecryption(::grpc::ServerContext* /*context*/, const ::el_gamal::Ciphertext* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitDecryption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitDecryption() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InitDecryption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDecryption(::grpc::ServerContext* /*context*/, const ::el_gamal::Ciphertext* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitDecryption(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitDecryption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitDecryption() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitDecryption(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitDecryption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDecryption(::grpc::ServerContext* /*context*/, const ::el_gamal::Ciphertext* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitDecryption(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitDecryption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitDecryption() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::el_gamal::Ciphertext, ::el_gamal::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::el_gamal::Ciphertext, ::el_gamal::Response>* streamer) {
                       return this->StreamedInitDecryption(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitDecryption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitDecryption(::grpc::ServerContext* /*context*/, const ::el_gamal::Ciphertext* /*request*/, ::el_gamal::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitDecryption(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::el_gamal::Ciphertext,::el_gamal::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InitDecryption<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InitDecryption<Service > StreamedService;
};

}  // namespace el_gamal


#endif  // GRPC_protos_2fthreshold_5fel_5fgamal_2eproto__INCLUDED
