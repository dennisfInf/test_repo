// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/bootstrap.proto

#include "protos/bootstrap.pb.h"
#include "protos/bootstrap.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace bootstrapper {

static const char* Bootstrap_method_names[] = {
  "/bootstrapper.Bootstrap/RegisterUser",
};

std::unique_ptr< Bootstrap::Stub> Bootstrap::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Bootstrap::Stub> stub(new Bootstrap::Stub(channel, options));
  return stub;
}

Bootstrap::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterUser_(Bootstrap_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Bootstrap::Stub::RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::bootstrapper::ParticipantIndex* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bootstrapper::Hello, ::bootstrapper::ParticipantIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterUser_, context, request, response);
}

void Bootstrap::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bootstrapper::Hello, ::bootstrapper::ParticipantIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, std::move(f));
}

void Bootstrap::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bootstrapper::ParticipantIndex>* Bootstrap::Stub::PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bootstrapper::ParticipantIndex, ::bootstrapper::Hello, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bootstrapper::ParticipantIndex>* Bootstrap::Stub::AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

Bootstrap::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bootstrap_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bootstrap::Service, ::bootstrapper::Hello, ::bootstrapper::ParticipantIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Bootstrap::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bootstrapper::Hello* req,
             ::bootstrapper::ParticipantIndex* resp) {
               return service->RegisterUser(ctx, req, resp);
             }, this)));
}

Bootstrap::Service::~Service() {
}

::grpc::Status Bootstrap::Service::RegisterUser(::grpc::ServerContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SendParticipants_method_names[] = {
  "/bootstrapper.SendParticipants/SendParticipants",
};

std::unique_ptr< SendParticipants::Stub> SendParticipants::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SendParticipants::Stub> stub(new SendParticipants::Stub(channel, options));
  return stub;
}

SendParticipants::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendParticipants_(SendParticipants_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SendParticipants::Stub::SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::bootstrapper::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bootstrapper::Participants, ::bootstrapper::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendParticipants_, context, request, response);
}

void SendParticipants::Stub::async::SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bootstrapper::Participants, ::bootstrapper::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendParticipants_, context, request, response, std::move(f));
}

void SendParticipants::Stub::async::SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendParticipants_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bootstrapper::Response>* SendParticipants::Stub::PrepareAsyncSendParticipantsRaw(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bootstrapper::Response, ::bootstrapper::Participants, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendParticipants_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bootstrapper::Response>* SendParticipants::Stub::AsyncSendParticipantsRaw(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendParticipantsRaw(context, request, cq);
  result->StartCall();
  return result;
}

SendParticipants::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SendParticipants_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SendParticipants::Service, ::bootstrapper::Participants, ::bootstrapper::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SendParticipants::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bootstrapper::Participants* req,
             ::bootstrapper::Response* resp) {
               return service->SendParticipants(ctx, req, resp);
             }, this)));
}

SendParticipants::Service::~Service() {
}

::grpc::Status SendParticipants::Service::SendParticipants(::grpc::ServerContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bootstrapper

