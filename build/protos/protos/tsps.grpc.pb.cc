// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/tsps.proto

#include "protos/tsps.pb.h"
#include "protos/tsps.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tsps {

static const char* DKG_method_names[] = {
  "/tsps.DKG/Send_Commited_Shares",
  "/tsps.DKG/Send_Matrix",
  "/tsps.DKG/Send_Message",
  "/tsps.DKG/Send_PartialSignature",
  "/tsps.DKG/Send_Verification_Key",
};

std::unique_ptr< DKG::Stub> DKG::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DKG::Stub> stub(new DKG::Stub(channel, options));
  return stub;
}

DKG::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Send_Commited_Shares_(DKG_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_Matrix_(DKG_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_Message_(DKG_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_PartialSignature_(DKG_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_Verification_Key_(DKG_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DKG::Stub::Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::tsps::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tsps::Commited_Share, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_Commited_Shares_, context, request, response);
}

void DKG::Stub::async::Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tsps::Commited_Share, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Commited_Shares_, context, request, response, std::move(f));
}

void DKG::Stub::async::Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Commited_Shares_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::PrepareAsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tsps::Response, ::tsps::Commited_Share, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_Commited_Shares_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::AsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSend_Commited_SharesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DKG::Stub::Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::tsps::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tsps::Matrix, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_Matrix_, context, request, response);
}

void DKG::Stub::async::Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tsps::Matrix, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Matrix_, context, request, response, std::move(f));
}

void DKG::Stub::async::Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Matrix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::PrepareAsyncSend_MatrixRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tsps::Response, ::tsps::Matrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_Matrix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::AsyncSend_MatrixRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSend_MatrixRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DKG::Stub::Send_Message(::grpc::ClientContext* context, const ::tsps::Message& request, ::tsps::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tsps::Message, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_Message_, context, request, response);
}

void DKG::Stub::async::Send_Message(::grpc::ClientContext* context, const ::tsps::Message* request, ::tsps::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tsps::Message, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Message_, context, request, response, std::move(f));
}

void DKG::Stub::async::Send_Message(::grpc::ClientContext* context, const ::tsps::Message* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::PrepareAsyncSend_MessageRaw(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tsps::Response, ::tsps::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_Message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::AsyncSend_MessageRaw(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSend_MessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DKG::Stub::Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::tsps::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tsps::PartialSignatureProto, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_PartialSignature_, context, request, response);
}

void DKG::Stub::async::Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tsps::PartialSignatureProto, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_PartialSignature_, context, request, response, std::move(f));
}

void DKG::Stub::async::Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_PartialSignature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::PrepareAsyncSend_PartialSignatureRaw(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tsps::Response, ::tsps::PartialSignatureProto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_PartialSignature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::AsyncSend_PartialSignatureRaw(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSend_PartialSignatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DKG::Stub::Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::tsps::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tsps::Matrix, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_Verification_Key_, context, request, response);
}

void DKG::Stub::async::Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tsps::Matrix, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Verification_Key_, context, request, response, std::move(f));
}

void DKG::Stub::async::Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Verification_Key_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::PrepareAsyncSend_Verification_KeyRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tsps::Response, ::tsps::Matrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_Verification_Key_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tsps::Response>* DKG::Stub::AsyncSend_Verification_KeyRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSend_Verification_KeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

DKG::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DKG_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DKG::Service, ::tsps::Commited_Share, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DKG::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tsps::Commited_Share* req,
             ::tsps::Response* resp) {
               return service->Send_Commited_Shares(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DKG_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DKG::Service, ::tsps::Matrix, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DKG::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tsps::Matrix* req,
             ::tsps::Response* resp) {
               return service->Send_Matrix(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DKG_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DKG::Service, ::tsps::Message, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DKG::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tsps::Message* req,
             ::tsps::Response* resp) {
               return service->Send_Message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DKG_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DKG::Service, ::tsps::PartialSignatureProto, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DKG::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tsps::PartialSignatureProto* req,
             ::tsps::Response* resp) {
               return service->Send_PartialSignature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DKG_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DKG::Service, ::tsps::Matrix, ::tsps::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DKG::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tsps::Matrix* req,
             ::tsps::Response* resp) {
               return service->Send_Verification_Key(ctx, req, resp);
             }, this)));
}

DKG::Service::~Service() {
}

::grpc::Status DKG::Service::Send_Commited_Shares(::grpc::ServerContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DKG::Service::Send_Matrix(::grpc::ServerContext* context, const ::tsps::Matrix* request, ::tsps::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DKG::Service::Send_Message(::grpc::ServerContext* context, const ::tsps::Message* request, ::tsps::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DKG::Service::Send_PartialSignature(::grpc::ServerContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DKG::Service::Send_Verification_Key(::grpc::ServerContext* context, const ::tsps::Matrix* request, ::tsps::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


std::unique_ptr< TSPS::Stub> TSPS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TSPS::Stub> stub(new TSPS::Stub(channel, options));
  return stub;
}

TSPS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

TSPS::Service::Service() {
}

TSPS::Service::~Service() {
}


}  // namespace tsps

