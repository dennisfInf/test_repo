// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/threshold_el_gamal.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fthreshold_5fel_5fgamal_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fthreshold_5fel_5fgamal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fthreshold_5fel_5fgamal_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protos_2fthreshold_5fel_5fgamal_2eproto;
namespace el_gamal {
class Ciphertext;
struct CiphertextDefaultTypeInternal;
extern CiphertextDefaultTypeInternal _Ciphertext_default_instance_;
class Commited_Share;
struct Commited_ShareDefaultTypeInternal;
extern Commited_ShareDefaultTypeInternal _Commited_Share_default_instance_;
class Participant_Public_Key;
struct Participant_Public_KeyDefaultTypeInternal;
extern Participant_Public_KeyDefaultTypeInternal _Participant_Public_Key_default_instance_;
class Proposed_Commitment;
struct Proposed_CommitmentDefaultTypeInternal;
extern Proposed_CommitmentDefaultTypeInternal _Proposed_Commitment_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Share;
struct ShareDefaultTypeInternal;
extern ShareDefaultTypeInternal _Share_default_instance_;
class Signature;
struct SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class Start;
struct StartDefaultTypeInternal;
extern StartDefaultTypeInternal _Start_default_instance_;
}  // namespace el_gamal
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace el_gamal {

// ===================================================================


// -------------------------------------------------------------------

class Start final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:el_gamal.Start) */ {
 public:
  inline Start() : Start(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Start(::google::protobuf::internal::ConstantInitialized);

  inline Start(const Start& from)
      : Start(nullptr, from) {}
  Start(Start&& from) noexcept
    : Start() {
    *this = ::std::move(from);
  }

  inline Start& operator=(const Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline Start& operator=(Start&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Start& default_instance() {
    return *internal_default_instance();
  }
  static inline const Start* internal_default_instance() {
    return reinterpret_cast<const Start*>(
               &_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Start& a, Start& b) {
    a.Swap(&b);
  }
  inline void Swap(Start* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Start* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Start* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Start>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Start& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Start& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "el_gamal.Start";
  }
  protected:
  explicit Start(::google::protobuf::Arena* arena);
  Start(::google::protobuf::Arena* arena, const Start& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:el_gamal.Start)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto;
};// -------------------------------------------------------------------

class Signature final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:el_gamal.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  ~Signature() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Signature(::google::protobuf::internal::ConstantInitialized);

  inline Signature(const Signature& from)
      : Signature(nullptr, from) {}
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signature* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Signature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Signature& from) {
    Signature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Signature* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "el_gamal.Signature";
  }
  protected:
  explicit Signature(::google::protobuf::Arena* arena);
  Signature(::google::protobuf::Arena* arena, const Signature& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZFieldNumber = 1,
    kRFieldNumber = 2,
  };
  // bytes z = 1;
  void clear_z() ;
  const std::string& z() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_z(Arg_&& arg, Args_... args);
  std::string* mutable_z();
  PROTOBUF_NODISCARD std::string* release_z();
  void set_allocated_z(std::string* value);

  private:
  const std::string& _internal_z() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_z(
      const std::string& value);
  std::string* _internal_mutable_z();

  public:
  // bytes r = 2;
  void clear_r() ;
  const std::string& r() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_r(Arg_&& arg, Args_... args);
  std::string* mutable_r();
  PROTOBUF_NODISCARD std::string* release_r();
  void set_allocated_r(std::string* value);

  private:
  const std::string& _internal_r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_r(
      const std::string& value);
  std::string* _internal_mutable_r();

  public:
  // @@protoc_insertion_point(class_scope:el_gamal.Signature)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr z_;
    ::google::protobuf::internal::ArenaStringPtr r_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto;
};// -------------------------------------------------------------------

class Share final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:el_gamal.Share) */ {
 public:
  inline Share() : Share(nullptr) {}
  ~Share() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Share(::google::protobuf::internal::ConstantInitialized);

  inline Share(const Share& from)
      : Share(nullptr, from) {}
  Share(Share&& from) noexcept
    : Share() {
    *this = ::std::move(from);
  }

  inline Share& operator=(const Share& from) {
    CopyFrom(from);
    return *this;
  }
  inline Share& operator=(Share&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Share& default_instance() {
    return *internal_default_instance();
  }
  static inline const Share* internal_default_instance() {
    return reinterpret_cast<const Share*>(
               &_Share_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Share& a, Share& b) {
    a.Swap(&b);
  }
  inline void Swap(Share* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Share* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Share* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Share>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Share& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Share& from) {
    Share::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Share* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "el_gamal.Share";
  }
  protected:
  explicit Share(::google::protobuf::Arena* arena);
  Share(::google::protobuf::Arena* arena, const Share& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareFieldNumber = 2,
    kReceiverIndexFieldNumber = 1,
  };
  // bytes share = 2;
  void clear_share() ;
  const std::string& share() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_share(Arg_&& arg, Args_... args);
  std::string* mutable_share();
  PROTOBUF_NODISCARD std::string* release_share();
  void set_allocated_share(std::string* value);

  private:
  const std::string& _internal_share() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share(
      const std::string& value);
  std::string* _internal_mutable_share();

  public:
  // uint32 receiver_index = 1;
  void clear_receiver_index() ;
  ::uint32_t receiver_index() const;
  void set_receiver_index(::uint32_t value);

  private:
  ::uint32_t _internal_receiver_index() const;
  void _internal_set_receiver_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:el_gamal.Share)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr share_;
    ::uint32_t receiver_index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto;
};// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:el_gamal.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::google::protobuf::internal::ConstantInitialized);

  inline Response(const Response& from)
      : Response(nullptr, from) {}
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Response& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Response& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "el_gamal.Response";
  }
  protected:
  explicit Response(::google::protobuf::Arena* arena);
  Response(::google::protobuf::Arena* arena, const Response& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:el_gamal.Response)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto;
};// -------------------------------------------------------------------

class Participant_Public_Key final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:el_gamal.Participant_Public_Key) */ {
 public:
  inline Participant_Public_Key() : Participant_Public_Key(nullptr) {}
  ~Participant_Public_Key() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Participant_Public_Key(::google::protobuf::internal::ConstantInitialized);

  inline Participant_Public_Key(const Participant_Public_Key& from)
      : Participant_Public_Key(nullptr, from) {}
  Participant_Public_Key(Participant_Public_Key&& from) noexcept
    : Participant_Public_Key() {
    *this = ::std::move(from);
  }

  inline Participant_Public_Key& operator=(const Participant_Public_Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Participant_Public_Key& operator=(Participant_Public_Key&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Participant_Public_Key& default_instance() {
    return *internal_default_instance();
  }
  static inline const Participant_Public_Key* internal_default_instance() {
    return reinterpret_cast<const Participant_Public_Key*>(
               &_Participant_Public_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Participant_Public_Key& a, Participant_Public_Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Participant_Public_Key* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Participant_Public_Key* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Participant_Public_Key* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Participant_Public_Key>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Participant_Public_Key& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Participant_Public_Key& from) {
    Participant_Public_Key::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Participant_Public_Key* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "el_gamal.Participant_Public_Key";
  }
  protected:
  explicit Participant_Public_Key(::google::protobuf::Arena* arena);
  Participant_Public_Key(::google::protobuf::Arena* arena, const Participant_Public_Key& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // bytes pk = 1;
  void clear_pk() ;
  const std::string& pk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pk(Arg_&& arg, Args_... args);
  std::string* mutable_pk();
  PROTOBUF_NODISCARD std::string* release_pk();
  void set_allocated_pk(std::string* value);

  private:
  const std::string& _internal_pk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pk(
      const std::string& value);
  std::string* _internal_mutable_pk();

  public:
  // uint32 player_id = 2;
  void clear_player_id() ;
  ::uint32_t player_id() const;
  void set_player_id(::uint32_t value);

  private:
  ::uint32_t _internal_player_id() const;
  void _internal_set_player_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:el_gamal.Participant_Public_Key)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr pk_;
    ::uint32_t player_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto;
};// -------------------------------------------------------------------

class Ciphertext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:el_gamal.Ciphertext) */ {
 public:
  inline Ciphertext() : Ciphertext(nullptr) {}
  ~Ciphertext() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ciphertext(::google::protobuf::internal::ConstantInitialized);

  inline Ciphertext(const Ciphertext& from)
      : Ciphertext(nullptr, from) {}
  Ciphertext(Ciphertext&& from) noexcept
    : Ciphertext() {
    *this = ::std::move(from);
  }

  inline Ciphertext& operator=(const Ciphertext& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ciphertext& operator=(Ciphertext&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ciphertext& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ciphertext* internal_default_instance() {
    return reinterpret_cast<const Ciphertext*>(
               &_Ciphertext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Ciphertext& a, Ciphertext& b) {
    a.Swap(&b);
  }
  inline void Swap(Ciphertext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ciphertext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ciphertext* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ciphertext>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ciphertext& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Ciphertext& from) {
    Ciphertext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Ciphertext* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "el_gamal.Ciphertext";
  }
  protected:
  explicit Ciphertext(::google::protobuf::Arena* arena);
  Ciphertext(::google::protobuf::Arena* arena, const Ciphertext& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kC1FieldNumber = 1,
    kNizkProofFieldNumber = 3,
    kC2FieldNumber = 4,
    kCiphertextIdFieldNumber = 2,
  };
  // bytes c1 = 1;
  void clear_c1() ;
  const std::string& c1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_c1(Arg_&& arg, Args_... args);
  std::string* mutable_c1();
  PROTOBUF_NODISCARD std::string* release_c1();
  void set_allocated_c1(std::string* value);

  private:
  const std::string& _internal_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c1(
      const std::string& value);
  std::string* _internal_mutable_c1();

  public:
  // bytes nizk_proof = 3;
  void clear_nizk_proof() ;
  const std::string& nizk_proof() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nizk_proof(Arg_&& arg, Args_... args);
  std::string* mutable_nizk_proof();
  PROTOBUF_NODISCARD std::string* release_nizk_proof();
  void set_allocated_nizk_proof(std::string* value);

  private:
  const std::string& _internal_nizk_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nizk_proof(
      const std::string& value);
  std::string* _internal_mutable_nizk_proof();

  public:
  // bytes c2 = 4;
  void clear_c2() ;
  const std::string& c2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_c2(Arg_&& arg, Args_... args);
  std::string* mutable_c2();
  PROTOBUF_NODISCARD std::string* release_c2();
  void set_allocated_c2(std::string* value);

  private:
  const std::string& _internal_c2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c2(
      const std::string& value);
  std::string* _internal_mutable_c2();

  public:
  // uint32 ciphertext_id = 2;
  void clear_ciphertext_id() ;
  ::uint32_t ciphertext_id() const;
  void set_ciphertext_id(::uint32_t value);

  private:
  ::uint32_t _internal_ciphertext_id() const;
  void _internal_set_ciphertext_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:el_gamal.Ciphertext)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr c1_;
    ::google::protobuf::internal::ArenaStringPtr nizk_proof_;
    ::google::protobuf::internal::ArenaStringPtr c2_;
    ::uint32_t ciphertext_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto;
};// -------------------------------------------------------------------

class Proposed_Commitment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:el_gamal.Proposed_Commitment) */ {
 public:
  inline Proposed_Commitment() : Proposed_Commitment(nullptr) {}
  ~Proposed_Commitment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Proposed_Commitment(::google::protobuf::internal::ConstantInitialized);

  inline Proposed_Commitment(const Proposed_Commitment& from)
      : Proposed_Commitment(nullptr, from) {}
  Proposed_Commitment(Proposed_Commitment&& from) noexcept
    : Proposed_Commitment() {
    *this = ::std::move(from);
  }

  inline Proposed_Commitment& operator=(const Proposed_Commitment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposed_Commitment& operator=(Proposed_Commitment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposed_Commitment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposed_Commitment* internal_default_instance() {
    return reinterpret_cast<const Proposed_Commitment*>(
               &_Proposed_Commitment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Proposed_Commitment& a, Proposed_Commitment& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposed_Commitment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposed_Commitment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposed_Commitment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proposed_Commitment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Proposed_Commitment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Proposed_Commitment& from) {
    Proposed_Commitment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Proposed_Commitment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "el_gamal.Proposed_Commitment";
  }
  protected:
  explicit Proposed_Commitment(::google::protobuf::Arena* arena);
  Proposed_Commitment(::google::protobuf::Arena* arena, const Proposed_Commitment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitmentsFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes commitments = 2;
  void clear_commitments() ;
  const std::string& commitments() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_commitments(Arg_&& arg, Args_... args);
  std::string* mutable_commitments();
  PROTOBUF_NODISCARD std::string* release_commitments();
  void set_allocated_commitments(std::string* value);

  private:
  const std::string& _internal_commitments() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commitments(
      const std::string& value);
  std::string* _internal_mutable_commitments();

  public:
  // .el_gamal.Signature signature = 3;
  bool has_signature() const;
  void clear_signature() ;
  const ::el_gamal::Signature& signature() const;
  PROTOBUF_NODISCARD ::el_gamal::Signature* release_signature();
  ::el_gamal::Signature* mutable_signature();
  void set_allocated_signature(::el_gamal::Signature* value);
  void unsafe_arena_set_allocated_signature(::el_gamal::Signature* value);
  ::el_gamal::Signature* unsafe_arena_release_signature();

  private:
  const ::el_gamal::Signature& _internal_signature() const;
  ::el_gamal::Signature* _internal_mutable_signature();

  public:
  // uint32 player_id = 1;
  void clear_player_id() ;
  ::uint32_t player_id() const;
  void set_player_id(::uint32_t value);

  private:
  ::uint32_t _internal_player_id() const;
  void _internal_set_player_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:el_gamal.Proposed_Commitment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr commitments_;
    ::el_gamal::Signature* signature_;
    ::uint32_t player_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto;
};// -------------------------------------------------------------------

class Commited_Share final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:el_gamal.Commited_Share) */ {
 public:
  inline Commited_Share() : Commited_Share(nullptr) {}
  ~Commited_Share() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Commited_Share(::google::protobuf::internal::ConstantInitialized);

  inline Commited_Share(const Commited_Share& from)
      : Commited_Share(nullptr, from) {}
  Commited_Share(Commited_Share&& from) noexcept
    : Commited_Share() {
    *this = ::std::move(from);
  }

  inline Commited_Share& operator=(const Commited_Share& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commited_Share& operator=(Commited_Share&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Commited_Share& default_instance() {
    return *internal_default_instance();
  }
  static inline const Commited_Share* internal_default_instance() {
    return reinterpret_cast<const Commited_Share*>(
               &_Commited_Share_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Commited_Share& a, Commited_Share& b) {
    a.Swap(&b);
  }
  inline void Swap(Commited_Share* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commited_Share* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Commited_Share* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Commited_Share>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Commited_Share& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Commited_Share& from) {
    Commited_Share::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Commited_Share* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "el_gamal.Commited_Share";
  }
  protected:
  explicit Commited_Share(::google::protobuf::Arena* arena);
  Commited_Share(::google::protobuf::Arena* arena, const Commited_Share& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareFieldNumber = 1,
    kCommitmentFieldNumber = 2,
  };
  // .el_gamal.Share share = 1;
  bool has_share() const;
  void clear_share() ;
  const ::el_gamal::Share& share() const;
  PROTOBUF_NODISCARD ::el_gamal::Share* release_share();
  ::el_gamal::Share* mutable_share();
  void set_allocated_share(::el_gamal::Share* value);
  void unsafe_arena_set_allocated_share(::el_gamal::Share* value);
  ::el_gamal::Share* unsafe_arena_release_share();

  private:
  const ::el_gamal::Share& _internal_share() const;
  ::el_gamal::Share* _internal_mutable_share();

  public:
  // .el_gamal.Proposed_Commitment commitment = 2;
  bool has_commitment() const;
  void clear_commitment() ;
  const ::el_gamal::Proposed_Commitment& commitment() const;
  PROTOBUF_NODISCARD ::el_gamal::Proposed_Commitment* release_commitment();
  ::el_gamal::Proposed_Commitment* mutable_commitment();
  void set_allocated_commitment(::el_gamal::Proposed_Commitment* value);
  void unsafe_arena_set_allocated_commitment(::el_gamal::Proposed_Commitment* value);
  ::el_gamal::Proposed_Commitment* unsafe_arena_release_commitment();

  private:
  const ::el_gamal::Proposed_Commitment& _internal_commitment() const;
  ::el_gamal::Proposed_Commitment* _internal_mutable_commitment();

  public:
  // @@protoc_insertion_point(class_scope:el_gamal.Commited_Share)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::el_gamal::Share* share_;
    ::el_gamal::Proposed_Commitment* commitment_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fthreshold_5fel_5fgamal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Response

// -------------------------------------------------------------------

// Start

// -------------------------------------------------------------------

// Signature

// bytes z = 1;
inline void Signature::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_.ClearToEmpty();
}
inline const std::string& Signature::z() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Signature.z)
  return _internal_z();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signature::set_z(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:el_gamal.Signature.z)
}
inline std::string* Signature::mutable_z() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:el_gamal.Signature.z)
  return _s;
}
inline const std::string& Signature::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_.Get();
}
inline void Signature::_internal_set_z(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_.Set(value, GetArena());
}
inline std::string* Signature::_internal_mutable_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.z_.Mutable( GetArena());
}
inline std::string* Signature::release_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Signature.z)
  return _impl_.z_.Release();
}
inline void Signature::set_allocated_z(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.z_.IsDefault()) {
          _impl_.z_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Signature.z)
}

// bytes r = 2;
inline void Signature::clear_r() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.r_.ClearToEmpty();
}
inline const std::string& Signature::r() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Signature.r)
  return _internal_r();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signature::set_r(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.r_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:el_gamal.Signature.r)
}
inline std::string* Signature::mutable_r() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_r();
  // @@protoc_insertion_point(field_mutable:el_gamal.Signature.r)
  return _s;
}
inline const std::string& Signature::_internal_r() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.r_.Get();
}
inline void Signature::_internal_set_r(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.r_.Set(value, GetArena());
}
inline std::string* Signature::_internal_mutable_r() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.r_.Mutable( GetArena());
}
inline std::string* Signature::release_r() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Signature.r)
  return _impl_.r_.Release();
}
inline void Signature::set_allocated_r(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.r_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.r_.IsDefault()) {
          _impl_.r_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Signature.r)
}

// -------------------------------------------------------------------

// Proposed_Commitment

// uint32 player_id = 1;
inline void Proposed_Commitment::clear_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_id_ = 0u;
}
inline ::uint32_t Proposed_Commitment::player_id() const {
  // @@protoc_insertion_point(field_get:el_gamal.Proposed_Commitment.player_id)
  return _internal_player_id();
}
inline void Proposed_Commitment::set_player_id(::uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:el_gamal.Proposed_Commitment.player_id)
}
inline ::uint32_t Proposed_Commitment::_internal_player_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_id_;
}
inline void Proposed_Commitment::_internal_set_player_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_id_ = value;
}

// bytes commitments = 2;
inline void Proposed_Commitment::clear_commitments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commitments_.ClearToEmpty();
}
inline const std::string& Proposed_Commitment::commitments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Proposed_Commitment.commitments)
  return _internal_commitments();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposed_Commitment::set_commitments(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commitments_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:el_gamal.Proposed_Commitment.commitments)
}
inline std::string* Proposed_Commitment::mutable_commitments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_commitments();
  // @@protoc_insertion_point(field_mutable:el_gamal.Proposed_Commitment.commitments)
  return _s;
}
inline const std::string& Proposed_Commitment::_internal_commitments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.commitments_.Get();
}
inline void Proposed_Commitment::_internal_set_commitments(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commitments_.Set(value, GetArena());
}
inline std::string* Proposed_Commitment::_internal_mutable_commitments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.commitments_.Mutable( GetArena());
}
inline std::string* Proposed_Commitment::release_commitments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Proposed_Commitment.commitments)
  return _impl_.commitments_.Release();
}
inline void Proposed_Commitment::set_allocated_commitments(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commitments_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.commitments_.IsDefault()) {
          _impl_.commitments_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Proposed_Commitment.commitments)
}

// .el_gamal.Signature signature = 3;
inline bool Proposed_Commitment::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline void Proposed_Commitment::clear_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::el_gamal::Signature& Proposed_Commitment::_internal_signature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::el_gamal::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::el_gamal::Signature&>(::el_gamal::_Signature_default_instance_);
}
inline const ::el_gamal::Signature& Proposed_Commitment::signature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Proposed_Commitment.signature)
  return _internal_signature();
}
inline void Proposed_Commitment::unsafe_arena_set_allocated_signature(::el_gamal::Signature* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = reinterpret_cast<::el_gamal::Signature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:el_gamal.Proposed_Commitment.signature)
}
inline ::el_gamal::Signature* Proposed_Commitment::release_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::el_gamal::Signature* released = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::el_gamal::Signature* Proposed_Commitment::unsafe_arena_release_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Proposed_Commitment.signature)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::el_gamal::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::el_gamal::Signature* Proposed_Commitment::_internal_mutable_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::el_gamal::Signature>(GetArena());
    _impl_.signature_ = reinterpret_cast<::el_gamal::Signature*>(p);
  }
  return _impl_.signature_;
}
inline ::el_gamal::Signature* Proposed_Commitment::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::el_gamal::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:el_gamal.Proposed_Commitment.signature)
  return _msg;
}
inline void Proposed_Commitment::set_allocated_signature(::el_gamal::Signature* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::el_gamal::Signature*>(_impl_.signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::el_gamal::Signature*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.signature_ = reinterpret_cast<::el_gamal::Signature*>(value);
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Proposed_Commitment.signature)
}

// -------------------------------------------------------------------

// Share

// uint32 receiver_index = 1;
inline void Share::clear_receiver_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.receiver_index_ = 0u;
}
inline ::uint32_t Share::receiver_index() const {
  // @@protoc_insertion_point(field_get:el_gamal.Share.receiver_index)
  return _internal_receiver_index();
}
inline void Share::set_receiver_index(::uint32_t value) {
  _internal_set_receiver_index(value);
  // @@protoc_insertion_point(field_set:el_gamal.Share.receiver_index)
}
inline ::uint32_t Share::_internal_receiver_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.receiver_index_;
}
inline void Share::_internal_set_receiver_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.receiver_index_ = value;
}

// bytes share = 2;
inline void Share::clear_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.share_.ClearToEmpty();
}
inline const std::string& Share::share() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Share.share)
  return _internal_share();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_share(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.share_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:el_gamal.Share.share)
}
inline std::string* Share::mutable_share() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_share();
  // @@protoc_insertion_point(field_mutable:el_gamal.Share.share)
  return _s;
}
inline const std::string& Share::_internal_share() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.share_.Get();
}
inline void Share::_internal_set_share(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.share_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.share_.Mutable( GetArena());
}
inline std::string* Share::release_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Share.share)
  return _impl_.share_.Release();
}
inline void Share::set_allocated_share(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.share_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.share_.IsDefault()) {
          _impl_.share_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Share.share)
}

// -------------------------------------------------------------------

// Commited_Share

// .el_gamal.Share share = 1;
inline bool Commited_Share::has_share() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.share_ != nullptr);
  return value;
}
inline void Commited_Share::clear_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.share_ != nullptr) _impl_.share_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::el_gamal::Share& Commited_Share::_internal_share() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::el_gamal::Share* p = _impl_.share_;
  return p != nullptr ? *p : reinterpret_cast<const ::el_gamal::Share&>(::el_gamal::_Share_default_instance_);
}
inline const ::el_gamal::Share& Commited_Share::share() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Commited_Share.share)
  return _internal_share();
}
inline void Commited_Share::unsafe_arena_set_allocated_share(::el_gamal::Share* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.share_);
  }
  _impl_.share_ = reinterpret_cast<::el_gamal::Share*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:el_gamal.Commited_Share.share)
}
inline ::el_gamal::Share* Commited_Share::release_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::el_gamal::Share* released = _impl_.share_;
  _impl_.share_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::el_gamal::Share* Commited_Share::unsafe_arena_release_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Commited_Share.share)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::el_gamal::Share* temp = _impl_.share_;
  _impl_.share_ = nullptr;
  return temp;
}
inline ::el_gamal::Share* Commited_Share::_internal_mutable_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.share_ == nullptr) {
    auto* p = CreateMaybeMessage<::el_gamal::Share>(GetArena());
    _impl_.share_ = reinterpret_cast<::el_gamal::Share*>(p);
  }
  return _impl_.share_;
}
inline ::el_gamal::Share* Commited_Share::mutable_share() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::el_gamal::Share* _msg = _internal_mutable_share();
  // @@protoc_insertion_point(field_mutable:el_gamal.Commited_Share.share)
  return _msg;
}
inline void Commited_Share::set_allocated_share(::el_gamal::Share* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::el_gamal::Share*>(_impl_.share_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::el_gamal::Share*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.share_ = reinterpret_cast<::el_gamal::Share*>(value);
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Commited_Share.share)
}

// .el_gamal.Proposed_Commitment commitment = 2;
inline bool Commited_Share::has_commitment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.commitment_ != nullptr);
  return value;
}
inline void Commited_Share::clear_commitment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.commitment_ != nullptr) _impl_.commitment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::el_gamal::Proposed_Commitment& Commited_Share::_internal_commitment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::el_gamal::Proposed_Commitment* p = _impl_.commitment_;
  return p != nullptr ? *p : reinterpret_cast<const ::el_gamal::Proposed_Commitment&>(::el_gamal::_Proposed_Commitment_default_instance_);
}
inline const ::el_gamal::Proposed_Commitment& Commited_Share::commitment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Commited_Share.commitment)
  return _internal_commitment();
}
inline void Commited_Share::unsafe_arena_set_allocated_commitment(::el_gamal::Proposed_Commitment* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.commitment_);
  }
  _impl_.commitment_ = reinterpret_cast<::el_gamal::Proposed_Commitment*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:el_gamal.Commited_Share.commitment)
}
inline ::el_gamal::Proposed_Commitment* Commited_Share::release_commitment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::el_gamal::Proposed_Commitment* released = _impl_.commitment_;
  _impl_.commitment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::el_gamal::Proposed_Commitment* Commited_Share::unsafe_arena_release_commitment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Commited_Share.commitment)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::el_gamal::Proposed_Commitment* temp = _impl_.commitment_;
  _impl_.commitment_ = nullptr;
  return temp;
}
inline ::el_gamal::Proposed_Commitment* Commited_Share::_internal_mutable_commitment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.commitment_ == nullptr) {
    auto* p = CreateMaybeMessage<::el_gamal::Proposed_Commitment>(GetArena());
    _impl_.commitment_ = reinterpret_cast<::el_gamal::Proposed_Commitment*>(p);
  }
  return _impl_.commitment_;
}
inline ::el_gamal::Proposed_Commitment* Commited_Share::mutable_commitment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::el_gamal::Proposed_Commitment* _msg = _internal_mutable_commitment();
  // @@protoc_insertion_point(field_mutable:el_gamal.Commited_Share.commitment)
  return _msg;
}
inline void Commited_Share::set_allocated_commitment(::el_gamal::Proposed_Commitment* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::el_gamal::Proposed_Commitment*>(_impl_.commitment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::el_gamal::Proposed_Commitment*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.commitment_ = reinterpret_cast<::el_gamal::Proposed_Commitment*>(value);
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Commited_Share.commitment)
}

// -------------------------------------------------------------------

// Participant_Public_Key

// bytes pk = 1;
inline void Participant_Public_Key::clear_pk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pk_.ClearToEmpty();
}
inline const std::string& Participant_Public_Key::pk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Participant_Public_Key.pk)
  return _internal_pk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Participant_Public_Key::set_pk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:el_gamal.Participant_Public_Key.pk)
}
inline std::string* Participant_Public_Key::mutable_pk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pk();
  // @@protoc_insertion_point(field_mutable:el_gamal.Participant_Public_Key.pk)
  return _s;
}
inline const std::string& Participant_Public_Key::_internal_pk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pk_.Get();
}
inline void Participant_Public_Key::_internal_set_pk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pk_.Set(value, GetArena());
}
inline std::string* Participant_Public_Key::_internal_mutable_pk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pk_.Mutable( GetArena());
}
inline std::string* Participant_Public_Key::release_pk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Participant_Public_Key.pk)
  return _impl_.pk_.Release();
}
inline void Participant_Public_Key::set_allocated_pk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pk_.IsDefault()) {
          _impl_.pk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Participant_Public_Key.pk)
}

// uint32 player_id = 2;
inline void Participant_Public_Key::clear_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_id_ = 0u;
}
inline ::uint32_t Participant_Public_Key::player_id() const {
  // @@protoc_insertion_point(field_get:el_gamal.Participant_Public_Key.player_id)
  return _internal_player_id();
}
inline void Participant_Public_Key::set_player_id(::uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:el_gamal.Participant_Public_Key.player_id)
}
inline ::uint32_t Participant_Public_Key::_internal_player_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_id_;
}
inline void Participant_Public_Key::_internal_set_player_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_id_ = value;
}

// -------------------------------------------------------------------

// Ciphertext

// bytes c1 = 1;
inline void Ciphertext::clear_c1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.c1_.ClearToEmpty();
}
inline const std::string& Ciphertext::c1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Ciphertext.c1)
  return _internal_c1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ciphertext::set_c1(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.c1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:el_gamal.Ciphertext.c1)
}
inline std::string* Ciphertext::mutable_c1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_c1();
  // @@protoc_insertion_point(field_mutable:el_gamal.Ciphertext.c1)
  return _s;
}
inline const std::string& Ciphertext::_internal_c1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.c1_.Get();
}
inline void Ciphertext::_internal_set_c1(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.c1_.Set(value, GetArena());
}
inline std::string* Ciphertext::_internal_mutable_c1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.c1_.Mutable( GetArena());
}
inline std::string* Ciphertext::release_c1() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Ciphertext.c1)
  return _impl_.c1_.Release();
}
inline void Ciphertext::set_allocated_c1(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.c1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.c1_.IsDefault()) {
          _impl_.c1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Ciphertext.c1)
}

// uint32 ciphertext_id = 2;
inline void Ciphertext::clear_ciphertext_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ciphertext_id_ = 0u;
}
inline ::uint32_t Ciphertext::ciphertext_id() const {
  // @@protoc_insertion_point(field_get:el_gamal.Ciphertext.ciphertext_id)
  return _internal_ciphertext_id();
}
inline void Ciphertext::set_ciphertext_id(::uint32_t value) {
  _internal_set_ciphertext_id(value);
  // @@protoc_insertion_point(field_set:el_gamal.Ciphertext.ciphertext_id)
}
inline ::uint32_t Ciphertext::_internal_ciphertext_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ciphertext_id_;
}
inline void Ciphertext::_internal_set_ciphertext_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ciphertext_id_ = value;
}

// bytes nizk_proof = 3;
inline void Ciphertext::clear_nizk_proof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nizk_proof_.ClearToEmpty();
}
inline const std::string& Ciphertext::nizk_proof() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Ciphertext.nizk_proof)
  return _internal_nizk_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ciphertext::set_nizk_proof(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nizk_proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:el_gamal.Ciphertext.nizk_proof)
}
inline std::string* Ciphertext::mutable_nizk_proof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nizk_proof();
  // @@protoc_insertion_point(field_mutable:el_gamal.Ciphertext.nizk_proof)
  return _s;
}
inline const std::string& Ciphertext::_internal_nizk_proof() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nizk_proof_.Get();
}
inline void Ciphertext::_internal_set_nizk_proof(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nizk_proof_.Set(value, GetArena());
}
inline std::string* Ciphertext::_internal_mutable_nizk_proof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nizk_proof_.Mutable( GetArena());
}
inline std::string* Ciphertext::release_nizk_proof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Ciphertext.nizk_proof)
  return _impl_.nizk_proof_.Release();
}
inline void Ciphertext::set_allocated_nizk_proof(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nizk_proof_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nizk_proof_.IsDefault()) {
          _impl_.nizk_proof_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Ciphertext.nizk_proof)
}

// bytes c2 = 4;
inline void Ciphertext::clear_c2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.c2_.ClearToEmpty();
}
inline const std::string& Ciphertext::c2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:el_gamal.Ciphertext.c2)
  return _internal_c2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ciphertext::set_c2(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.c2_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:el_gamal.Ciphertext.c2)
}
inline std::string* Ciphertext::mutable_c2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_c2();
  // @@protoc_insertion_point(field_mutable:el_gamal.Ciphertext.c2)
  return _s;
}
inline const std::string& Ciphertext::_internal_c2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.c2_.Get();
}
inline void Ciphertext::_internal_set_c2(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.c2_.Set(value, GetArena());
}
inline std::string* Ciphertext::_internal_mutable_c2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.c2_.Mutable( GetArena());
}
inline std::string* Ciphertext::release_c2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:el_gamal.Ciphertext.c2)
  return _impl_.c2_.Release();
}
inline void Ciphertext::set_allocated_c2(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.c2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.c2_.IsDefault()) {
          _impl_.c2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:el_gamal.Ciphertext.c2)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace el_gamal


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fthreshold_5fel_5fgamal_2eproto_2epb_2eh
