// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/bootstrap.proto
#ifndef GRPC_protos_2fbootstrap_2eproto__INCLUDED
#define GRPC_protos_2fbootstrap_2eproto__INCLUDED

#include "protos/bootstrap.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bootstrapper {

class Bootstrap final {
 public:
  static constexpr char const* service_full_name() {
    return "bootstrapper.Bootstrap";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::bootstrapper::ParticipantIndex* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::ParticipantIndex>> AsyncRegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::ParticipantIndex>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::ParticipantIndex>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::ParticipantIndex>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::ParticipantIndex>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::ParticipantIndex>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::bootstrapper::ParticipantIndex* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bootstrapper::ParticipantIndex>> AsyncRegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bootstrapper::ParticipantIndex>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bootstrapper::ParticipantIndex>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bootstrapper::ParticipantIndex>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response, std::function<void(::grpc::Status)>) override;
      void RegisterUser(::grpc::ClientContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bootstrapper::ParticipantIndex>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bootstrapper::ParticipantIndex>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::bootstrapper::Hello& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterUser(::grpc::ServerContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::bootstrapper::Hello* /*request*/, ::bootstrapper::ParticipantIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::bootstrapper::Hello* request, ::grpc::ServerAsyncResponseWriter< ::bootstrapper::ParticipantIndex>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterUser<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bootstrapper::Hello, ::bootstrapper::ParticipantIndex>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bootstrapper::Hello* request, ::bootstrapper::ParticipantIndex* response) { return this->RegisterUser(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterUser(
        ::grpc::MessageAllocator< ::bootstrapper::Hello, ::bootstrapper::ParticipantIndex>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bootstrapper::Hello, ::bootstrapper::ParticipantIndex>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::bootstrapper::Hello* /*request*/, ::bootstrapper::ParticipantIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::bootstrapper::Hello* /*request*/, ::bootstrapper::ParticipantIndex* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterUser<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::bootstrapper::Hello* /*request*/, ::bootstrapper::ParticipantIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::bootstrapper::Hello* /*request*/, ::bootstrapper::ParticipantIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::bootstrapper::Hello* /*request*/, ::bootstrapper::ParticipantIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bootstrapper::Hello, ::bootstrapper::ParticipantIndex>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bootstrapper::Hello, ::bootstrapper::ParticipantIndex>* streamer) {
                       return this->StreamedRegisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::bootstrapper::Hello* /*request*/, ::bootstrapper::ParticipantIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bootstrapper::Hello,::bootstrapper::ParticipantIndex>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterUser<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterUser<Service > StreamedService;
};

class SendParticipants final {
 public:
  static constexpr char const* service_full_name() {
    return "bootstrapper.SendParticipants";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::bootstrapper::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::Response>> AsyncSendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::Response>>(AsyncSendParticipantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::Response>> PrepareAsyncSendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::Response>>(PrepareAsyncSendParticipantsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::Response>* AsyncSendParticipantsRaw(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bootstrapper::Response>* PrepareAsyncSendParticipantsRaw(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::bootstrapper::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bootstrapper::Response>> AsyncSendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bootstrapper::Response>>(AsyncSendParticipantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bootstrapper::Response>> PrepareAsyncSendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bootstrapper::Response>>(PrepareAsyncSendParticipantsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response, std::function<void(::grpc::Status)>) override;
      void SendParticipants(::grpc::ClientContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bootstrapper::Response>* AsyncSendParticipantsRaw(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bootstrapper::Response>* PrepareAsyncSendParticipantsRaw(::grpc::ClientContext* context, const ::bootstrapper::Participants& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendParticipants_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendParticipants(::grpc::ServerContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendParticipants() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendParticipants(::grpc::ServerContext* /*context*/, const ::bootstrapper::Participants* /*request*/, ::bootstrapper::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendParticipants(::grpc::ServerContext* context, ::bootstrapper::Participants* request, ::grpc::ServerAsyncResponseWriter< ::bootstrapper::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendParticipants<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendParticipants() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bootstrapper::Participants, ::bootstrapper::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bootstrapper::Participants* request, ::bootstrapper::Response* response) { return this->SendParticipants(context, request, response); }));}
    void SetMessageAllocatorFor_SendParticipants(
        ::grpc::MessageAllocator< ::bootstrapper::Participants, ::bootstrapper::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bootstrapper::Participants, ::bootstrapper::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendParticipants(::grpc::ServerContext* /*context*/, const ::bootstrapper::Participants* /*request*/, ::bootstrapper::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendParticipants(
      ::grpc::CallbackServerContext* /*context*/, const ::bootstrapper::Participants* /*request*/, ::bootstrapper::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendParticipants<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendParticipants() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendParticipants(::grpc::ServerContext* /*context*/, const ::bootstrapper::Participants* /*request*/, ::bootstrapper::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendParticipants() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendParticipants(::grpc::ServerContext* /*context*/, const ::bootstrapper::Participants* /*request*/, ::bootstrapper::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendParticipants(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendParticipants() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendParticipants(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendParticipants(::grpc::ServerContext* /*context*/, const ::bootstrapper::Participants* /*request*/, ::bootstrapper::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendParticipants(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendParticipants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendParticipants() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bootstrapper::Participants, ::bootstrapper::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bootstrapper::Participants, ::bootstrapper::Response>* streamer) {
                       return this->StreamedSendParticipants(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendParticipants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendParticipants(::grpc::ServerContext* /*context*/, const ::bootstrapper::Participants* /*request*/, ::bootstrapper::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendParticipants(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bootstrapper::Participants,::bootstrapper::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendParticipants<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendParticipants<Service > StreamedService;
};

}  // namespace bootstrapper


#endif  // GRPC_protos_2fbootstrap_2eproto__INCLUDED
