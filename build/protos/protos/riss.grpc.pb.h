// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/riss.proto
#ifndef GRPC_protos_2friss_2eproto__INCLUDED
#define GRPC_protos_2friss_2eproto__INCLUDED

#include "protos/riss.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace riss {

class RISS final {
 public:
  static constexpr char const* service_full_name() {
    return "riss.RISS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendShare(::grpc::ClientContext* context, const ::riss::Share& request, ::riss::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>> AsyncSendShare(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>>(AsyncSendShareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>> PrepareAsyncSendShare(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>>(PrepareAsyncSendShareRaw(context, request, cq));
    }
    virtual ::grpc::Status SendR(::grpc::ClientContext* context, const ::riss::R& request, ::riss::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>> AsyncSendR(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>>(AsyncSendRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>> PrepareAsyncSendR(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>>(PrepareAsyncSendRRaw(context, request, cq));
    }
    virtual ::grpc::Status SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::riss::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>> AsyncSendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>>(AsyncSendShamirShareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>> PrepareAsyncSendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>>(PrepareAsyncSendShamirShareRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendShare(::grpc::ClientContext* context, const ::riss::Share* request, ::riss::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendShare(::grpc::ClientContext* context, const ::riss::Share* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendR(::grpc::ClientContext* context, const ::riss::R* request, ::riss::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendR(::grpc::ClientContext* context, const ::riss::R* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare* request, ::riss::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>* AsyncSendShareRaw(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>* PrepareAsyncSendShareRaw(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>* AsyncSendRRaw(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>* PrepareAsyncSendRRaw(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>* AsyncSendShamirShareRaw(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::riss::Response>* PrepareAsyncSendShamirShareRaw(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendShare(::grpc::ClientContext* context, const ::riss::Share& request, ::riss::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>> AsyncSendShare(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>>(AsyncSendShareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>> PrepareAsyncSendShare(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>>(PrepareAsyncSendShareRaw(context, request, cq));
    }
    ::grpc::Status SendR(::grpc::ClientContext* context, const ::riss::R& request, ::riss::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>> AsyncSendR(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>>(AsyncSendRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>> PrepareAsyncSendR(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>>(PrepareAsyncSendRRaw(context, request, cq));
    }
    ::grpc::Status SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::riss::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>> AsyncSendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>>(AsyncSendShamirShareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>> PrepareAsyncSendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::riss::Response>>(PrepareAsyncSendShamirShareRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendShare(::grpc::ClientContext* context, const ::riss::Share* request, ::riss::Response* response, std::function<void(::grpc::Status)>) override;
      void SendShare(::grpc::ClientContext* context, const ::riss::Share* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendR(::grpc::ClientContext* context, const ::riss::R* request, ::riss::Response* response, std::function<void(::grpc::Status)>) override;
      void SendR(::grpc::ClientContext* context, const ::riss::R* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare* request, ::riss::Response* response, std::function<void(::grpc::Status)>) override;
      void SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::riss::Response>* AsyncSendShareRaw(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::riss::Response>* PrepareAsyncSendShareRaw(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::riss::Response>* AsyncSendRRaw(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::riss::Response>* PrepareAsyncSendRRaw(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::riss::Response>* AsyncSendShamirShareRaw(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::riss::Response>* PrepareAsyncSendShamirShareRaw(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendShare_;
    const ::grpc::internal::RpcMethod rpcmethod_SendR_;
    const ::grpc::internal::RpcMethod rpcmethod_SendShamirShare_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendShare(::grpc::ServerContext* context, const ::riss::Share* request, ::riss::Response* response);
    virtual ::grpc::Status SendR(::grpc::ServerContext* context, const ::riss::R* request, ::riss::Response* response);
    virtual ::grpc::Status SendShamirShare(::grpc::ServerContext* context, const ::riss::ShamirShare* request, ::riss::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendShare() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShare(::grpc::ServerContext* /*context*/, const ::riss::Share* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendShare(::grpc::ServerContext* context, ::riss::Share* request, ::grpc::ServerAsyncResponseWriter< ::riss::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendR() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendR(::grpc::ServerContext* /*context*/, const ::riss::R* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendR(::grpc::ServerContext* context, ::riss::R* request, ::grpc::ServerAsyncResponseWriter< ::riss::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendShamirShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendShamirShare() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendShamirShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShamirShare(::grpc::ServerContext* /*context*/, const ::riss::ShamirShare* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendShamirShare(::grpc::ServerContext* context, ::riss::ShamirShare* request, ::grpc::ServerAsyncResponseWriter< ::riss::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendShare<WithAsyncMethod_SendR<WithAsyncMethod_SendShamirShare<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendShare() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::riss::Share, ::riss::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::riss::Share* request, ::riss::Response* response) { return this->SendShare(context, request, response); }));}
    void SetMessageAllocatorFor_SendShare(
        ::grpc::MessageAllocator< ::riss::Share, ::riss::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::riss::Share, ::riss::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShare(::grpc::ServerContext* /*context*/, const ::riss::Share* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendShare(
      ::grpc::CallbackServerContext* /*context*/, const ::riss::Share* /*request*/, ::riss::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendR() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::riss::R, ::riss::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::riss::R* request, ::riss::Response* response) { return this->SendR(context, request, response); }));}
    void SetMessageAllocatorFor_SendR(
        ::grpc::MessageAllocator< ::riss::R, ::riss::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::riss::R, ::riss::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendR(::grpc::ServerContext* /*context*/, const ::riss::R* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendR(
      ::grpc::CallbackServerContext* /*context*/, const ::riss::R* /*request*/, ::riss::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendShamirShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendShamirShare() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::riss::ShamirShare, ::riss::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::riss::ShamirShare* request, ::riss::Response* response) { return this->SendShamirShare(context, request, response); }));}
    void SetMessageAllocatorFor_SendShamirShare(
        ::grpc::MessageAllocator< ::riss::ShamirShare, ::riss::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::riss::ShamirShare, ::riss::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendShamirShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShamirShare(::grpc::ServerContext* /*context*/, const ::riss::ShamirShare* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendShamirShare(
      ::grpc::CallbackServerContext* /*context*/, const ::riss::ShamirShare* /*request*/, ::riss::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendShare<WithCallbackMethod_SendR<WithCallbackMethod_SendShamirShare<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendShare() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShare(::grpc::ServerContext* /*context*/, const ::riss::Share* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendR() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendR(::grpc::ServerContext* /*context*/, const ::riss::R* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendShamirShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendShamirShare() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendShamirShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShamirShare(::grpc::ServerContext* /*context*/, const ::riss::ShamirShare* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendShare() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShare(::grpc::ServerContext* /*context*/, const ::riss::Share* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendShare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendR() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendR(::grpc::ServerContext* /*context*/, const ::riss::R* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendShamirShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendShamirShare() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendShamirShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShamirShare(::grpc::ServerContext* /*context*/, const ::riss::ShamirShare* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendShamirShare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendShare() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendShare(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShare(::grpc::ServerContext* /*context*/, const ::riss::Share* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendShare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendR() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendR(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendR(::grpc::ServerContext* /*context*/, const ::riss::R* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendShamirShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendShamirShare() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendShamirShare(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendShamirShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendShamirShare(::grpc::ServerContext* /*context*/, const ::riss::ShamirShare* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendShamirShare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendShare() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::riss::Share, ::riss::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::riss::Share, ::riss::Response>* streamer) {
                       return this->StreamedSendShare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendShare(::grpc::ServerContext* /*context*/, const ::riss::Share* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendShare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::riss::Share,::riss::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendR() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::riss::R, ::riss::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::riss::R, ::riss::Response>* streamer) {
                       return this->StreamedSendR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendR(::grpc::ServerContext* /*context*/, const ::riss::R* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::riss::R,::riss::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendShamirShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendShamirShare() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::riss::ShamirShare, ::riss::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::riss::ShamirShare, ::riss::Response>* streamer) {
                       return this->StreamedSendShamirShare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendShamirShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendShamirShare(::grpc::ServerContext* /*context*/, const ::riss::ShamirShare* /*request*/, ::riss::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendShamirShare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::riss::ShamirShare,::riss::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendShare<WithStreamedUnaryMethod_SendR<WithStreamedUnaryMethod_SendShamirShare<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendShare<WithStreamedUnaryMethod_SendR<WithStreamedUnaryMethod_SendShamirShare<Service > > > StreamedService;
};

}  // namespace riss


#endif  // GRPC_protos_2friss_2eproto__INCLUDED
