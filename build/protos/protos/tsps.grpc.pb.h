// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/tsps.proto
#ifndef GRPC_protos_2ftsps_2eproto__INCLUDED
#define GRPC_protos_2ftsps_2eproto__INCLUDED

#include "protos/tsps.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace tsps {

class DKG final {
 public:
  static constexpr char const* service_full_name() {
    return "tsps.DKG";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::tsps::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> AsyncSend_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(AsyncSend_Commited_SharesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> PrepareAsyncSend_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(PrepareAsyncSend_Commited_SharesRaw(context, request, cq));
    }
    virtual ::grpc::Status Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::tsps::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> AsyncSend_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(AsyncSend_MatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> PrepareAsyncSend_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(PrepareAsyncSend_MatrixRaw(context, request, cq));
    }
    virtual ::grpc::Status Send_Message(::grpc::ClientContext* context, const ::tsps::Message& request, ::tsps::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> AsyncSend_Message(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(AsyncSend_MessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> PrepareAsyncSend_Message(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(PrepareAsyncSend_MessageRaw(context, request, cq));
    }
    virtual ::grpc::Status Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::tsps::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> AsyncSend_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(AsyncSend_PartialSignatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> PrepareAsyncSend_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(PrepareAsyncSend_PartialSignatureRaw(context, request, cq));
    }
    virtual ::grpc::Status Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::tsps::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> AsyncSend_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(AsyncSend_Verification_KeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>> PrepareAsyncSend_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>>(PrepareAsyncSend_Verification_KeyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Send_Message(::grpc::ClientContext* context, const ::tsps::Message* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send_Message(::grpc::ClientContext* context, const ::tsps::Message* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* AsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* PrepareAsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* AsyncSend_MatrixRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* PrepareAsyncSend_MatrixRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* AsyncSend_MessageRaw(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* PrepareAsyncSend_MessageRaw(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* AsyncSend_PartialSignatureRaw(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* PrepareAsyncSend_PartialSignatureRaw(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* AsyncSend_Verification_KeyRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsps::Response>* PrepareAsyncSend_Verification_KeyRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::tsps::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> AsyncSend_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(AsyncSend_Commited_SharesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> PrepareAsyncSend_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(PrepareAsyncSend_Commited_SharesRaw(context, request, cq));
    }
    ::grpc::Status Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::tsps::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> AsyncSend_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(AsyncSend_MatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> PrepareAsyncSend_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(PrepareAsyncSend_MatrixRaw(context, request, cq));
    }
    ::grpc::Status Send_Message(::grpc::ClientContext* context, const ::tsps::Message& request, ::tsps::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> AsyncSend_Message(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(AsyncSend_MessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> PrepareAsyncSend_Message(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(PrepareAsyncSend_MessageRaw(context, request, cq));
    }
    ::grpc::Status Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::tsps::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> AsyncSend_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(AsyncSend_PartialSignatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> PrepareAsyncSend_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(PrepareAsyncSend_PartialSignatureRaw(context, request, cq));
    }
    ::grpc::Status Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::tsps::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> AsyncSend_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(AsyncSend_Verification_KeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>> PrepareAsyncSend_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsps::Response>>(PrepareAsyncSend_Verification_KeyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) override;
      void Send_Commited_Shares(::grpc::ClientContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) override;
      void Send_Matrix(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Send_Message(::grpc::ClientContext* context, const ::tsps::Message* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) override;
      void Send_Message(::grpc::ClientContext* context, const ::tsps::Message* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) override;
      void Send_PartialSignature(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, std::function<void(::grpc::Status)>) override;
      void Send_Verification_Key(::grpc::ClientContext* context, const ::tsps::Matrix* request, ::tsps::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* AsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* PrepareAsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::tsps::Commited_Share& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* AsyncSend_MatrixRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* PrepareAsyncSend_MatrixRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* AsyncSend_MessageRaw(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* PrepareAsyncSend_MessageRaw(::grpc::ClientContext* context, const ::tsps::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* AsyncSend_PartialSignatureRaw(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* PrepareAsyncSend_PartialSignatureRaw(::grpc::ClientContext* context, const ::tsps::PartialSignatureProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* AsyncSend_Verification_KeyRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsps::Response>* PrepareAsyncSend_Verification_KeyRaw(::grpc::ClientContext* context, const ::tsps::Matrix& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Send_Commited_Shares_;
    const ::grpc::internal::RpcMethod rpcmethod_Send_Matrix_;
    const ::grpc::internal::RpcMethod rpcmethod_Send_Message_;
    const ::grpc::internal::RpcMethod rpcmethod_Send_PartialSignature_;
    const ::grpc::internal::RpcMethod rpcmethod_Send_Verification_Key_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response);
    virtual ::grpc::Status Send_Matrix(::grpc::ServerContext* context, const ::tsps::Matrix* request, ::tsps::Response* response);
    virtual ::grpc::Status Send_Message(::grpc::ServerContext* context, const ::tsps::Message* request, ::tsps::Response* response);
    virtual ::grpc::Status Send_PartialSignature(::grpc::ServerContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response);
    virtual ::grpc::Status Send_Verification_Key(::grpc::ServerContext* context, const ::tsps::Matrix* request, ::tsps::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::tsps::Commited_Share* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Commited_Shares(::grpc::ServerContext* context, ::tsps::Commited_Share* request, ::grpc::ServerAsyncResponseWriter< ::tsps::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Send_Matrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send_Matrix() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Send_Matrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Matrix(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Matrix(::grpc::ServerContext* context, ::tsps::Matrix* request, ::grpc::ServerAsyncResponseWriter< ::tsps::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Send_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send_Message() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Send_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Message(::grpc::ServerContext* /*context*/, const ::tsps::Message* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Message(::grpc::ServerContext* context, ::tsps::Message* request, ::grpc::ServerAsyncResponseWriter< ::tsps::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Send_PartialSignature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send_PartialSignature() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Send_PartialSignature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_PartialSignature(::grpc::ServerContext* /*context*/, const ::tsps::PartialSignatureProto* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_PartialSignature(::grpc::ServerContext* context, ::tsps::PartialSignatureProto* request, ::grpc::ServerAsyncResponseWriter< ::tsps::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Send_Verification_Key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send_Verification_Key() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Send_Verification_Key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Verification_Key(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Verification_Key(::grpc::ServerContext* context, ::tsps::Matrix* request, ::grpc::ServerAsyncResponseWriter< ::tsps::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Send_Commited_Shares<WithAsyncMethod_Send_Matrix<WithAsyncMethod_Send_Message<WithAsyncMethod_Send_PartialSignature<WithAsyncMethod_Send_Verification_Key<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tsps::Commited_Share, ::tsps::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tsps::Commited_Share* request, ::tsps::Response* response) { return this->Send_Commited_Shares(context, request, response); }));}
    void SetMessageAllocatorFor_Send_Commited_Shares(
        ::grpc::MessageAllocator< ::tsps::Commited_Share, ::tsps::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tsps::Commited_Share, ::tsps::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::tsps::Commited_Share* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Commited_Shares(
      ::grpc::CallbackServerContext* /*context*/, const ::tsps::Commited_Share* /*request*/, ::tsps::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Send_Matrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send_Matrix() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tsps::Matrix, ::tsps::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tsps::Matrix* request, ::tsps::Response* response) { return this->Send_Matrix(context, request, response); }));}
    void SetMessageAllocatorFor_Send_Matrix(
        ::grpc::MessageAllocator< ::tsps::Matrix, ::tsps::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tsps::Matrix, ::tsps::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send_Matrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Matrix(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Matrix(
      ::grpc::CallbackServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Send_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send_Message() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tsps::Message, ::tsps::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tsps::Message* request, ::tsps::Response* response) { return this->Send_Message(context, request, response); }));}
    void SetMessageAllocatorFor_Send_Message(
        ::grpc::MessageAllocator< ::tsps::Message, ::tsps::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tsps::Message, ::tsps::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Message(::grpc::ServerContext* /*context*/, const ::tsps::Message* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Message(
      ::grpc::CallbackServerContext* /*context*/, const ::tsps::Message* /*request*/, ::tsps::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Send_PartialSignature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send_PartialSignature() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::tsps::PartialSignatureProto, ::tsps::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tsps::PartialSignatureProto* request, ::tsps::Response* response) { return this->Send_PartialSignature(context, request, response); }));}
    void SetMessageAllocatorFor_Send_PartialSignature(
        ::grpc::MessageAllocator< ::tsps::PartialSignatureProto, ::tsps::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tsps::PartialSignatureProto, ::tsps::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send_PartialSignature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_PartialSignature(::grpc::ServerContext* /*context*/, const ::tsps::PartialSignatureProto* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_PartialSignature(
      ::grpc::CallbackServerContext* /*context*/, const ::tsps::PartialSignatureProto* /*request*/, ::tsps::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Send_Verification_Key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send_Verification_Key() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::tsps::Matrix, ::tsps::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tsps::Matrix* request, ::tsps::Response* response) { return this->Send_Verification_Key(context, request, response); }));}
    void SetMessageAllocatorFor_Send_Verification_Key(
        ::grpc::MessageAllocator< ::tsps::Matrix, ::tsps::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tsps::Matrix, ::tsps::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send_Verification_Key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Verification_Key(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Verification_Key(
      ::grpc::CallbackServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Send_Commited_Shares<WithCallbackMethod_Send_Matrix<WithCallbackMethod_Send_Message<WithCallbackMethod_Send_PartialSignature<WithCallbackMethod_Send_Verification_Key<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::tsps::Commited_Share* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Send_Matrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send_Matrix() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Send_Matrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Matrix(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Send_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send_Message() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Send_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Message(::grpc::ServerContext* /*context*/, const ::tsps::Message* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Send_PartialSignature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send_PartialSignature() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Send_PartialSignature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_PartialSignature(::grpc::ServerContext* /*context*/, const ::tsps::PartialSignatureProto* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Send_Verification_Key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send_Verification_Key() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Send_Verification_Key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Verification_Key(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::tsps::Commited_Share* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Commited_Shares(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send_Matrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send_Matrix() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Send_Matrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Matrix(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Matrix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send_Message() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Send_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Message(::grpc::ServerContext* /*context*/, const ::tsps::Message* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send_PartialSignature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send_PartialSignature() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Send_PartialSignature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_PartialSignature(::grpc::ServerContext* /*context*/, const ::tsps::PartialSignatureProto* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_PartialSignature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send_Verification_Key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send_Verification_Key() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Send_Verification_Key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Verification_Key(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend_Verification_Key(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send_Commited_Shares(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::tsps::Commited_Share* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Commited_Shares(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send_Matrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send_Matrix() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send_Matrix(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send_Matrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Matrix(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Matrix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send_Message() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send_Message(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Message(::grpc::ServerContext* /*context*/, const ::tsps::Message* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send_PartialSignature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send_PartialSignature() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send_PartialSignature(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send_PartialSignature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_PartialSignature(::grpc::ServerContext* /*context*/, const ::tsps::PartialSignatureProto* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_PartialSignature(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send_Verification_Key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send_Verification_Key() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send_Verification_Key(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send_Verification_Key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send_Verification_Key(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send_Verification_Key(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send_Commited_Shares : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send_Commited_Shares() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tsps::Commited_Share, ::tsps::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tsps::Commited_Share, ::tsps::Response>* streamer) {
                       return this->StreamedSend_Commited_Shares(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send_Commited_Shares() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send_Commited_Shares(::grpc::ServerContext* /*context*/, const ::tsps::Commited_Share* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend_Commited_Shares(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsps::Commited_Share,::tsps::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send_Matrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send_Matrix() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tsps::Matrix, ::tsps::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tsps::Matrix, ::tsps::Response>* streamer) {
                       return this->StreamedSend_Matrix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send_Matrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send_Matrix(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend_Matrix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsps::Matrix,::tsps::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send_Message() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tsps::Message, ::tsps::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tsps::Message, ::tsps::Response>* streamer) {
                       return this->StreamedSend_Message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send_Message(::grpc::ServerContext* /*context*/, const ::tsps::Message* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend_Message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsps::Message,::tsps::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send_PartialSignature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send_PartialSignature() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tsps::PartialSignatureProto, ::tsps::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tsps::PartialSignatureProto, ::tsps::Response>* streamer) {
                       return this->StreamedSend_PartialSignature(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send_PartialSignature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send_PartialSignature(::grpc::ServerContext* /*context*/, const ::tsps::PartialSignatureProto* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend_PartialSignature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsps::PartialSignatureProto,::tsps::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send_Verification_Key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send_Verification_Key() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tsps::Matrix, ::tsps::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tsps::Matrix, ::tsps::Response>* streamer) {
                       return this->StreamedSend_Verification_Key(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send_Verification_Key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send_Verification_Key(::grpc::ServerContext* /*context*/, const ::tsps::Matrix* /*request*/, ::tsps::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend_Verification_Key(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsps::Matrix,::tsps::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Send_Commited_Shares<WithStreamedUnaryMethod_Send_Matrix<WithStreamedUnaryMethod_Send_Message<WithStreamedUnaryMethod_Send_PartialSignature<WithStreamedUnaryMethod_Send_Verification_Key<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Send_Commited_Shares<WithStreamedUnaryMethod_Send_Matrix<WithStreamedUnaryMethod_Send_Message<WithStreamedUnaryMethod_Send_PartialSignature<WithStreamedUnaryMethod_Send_Verification_Key<Service > > > > > StreamedService;
};

class TSPS final {
 public:
  static constexpr char const* service_full_name() {
    return "tsps.TSPS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    class async_interface {
     public:
      virtual ~async_interface() {}
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    class async final :
      public StubInterface::async_interface {
     public:
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
  };
  typedef Service AsyncService;
  typedef Service CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace tsps


#endif  // GRPC_protos_2ftsps_2eproto__INCLUDED
