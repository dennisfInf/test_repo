// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/threshold_el_gamal.proto

#include "protos/threshold_el_gamal.pb.h"
#include "protos/threshold_el_gamal.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace el_gamal {

static const char* DKG_Start_method_names[] = {
  "/el_gamal.DKG_Start/Init_DKG",
};

std::unique_ptr< DKG_Start::Stub> DKG_Start::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DKG_Start::Stub> stub(new DKG_Start::Stub(channel, options));
  return stub;
}

DKG_Start::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Init_DKG_(DKG_Start_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DKG_Start::Stub::Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::el_gamal::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::el_gamal::Start, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_DKG_, context, request, response);
}

void DKG_Start::Stub::async::Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::el_gamal::Start, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_DKG_, context, request, response, std::move(f));
}

void DKG_Start::Stub::async::Init_DKG(::grpc::ClientContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_DKG_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* DKG_Start::Stub::PrepareAsyncInit_DKGRaw(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::el_gamal::Response, ::el_gamal::Start, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_DKG_, context, request);
}

::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* DKG_Start::Stub::AsyncInit_DKGRaw(::grpc::ClientContext* context, const ::el_gamal::Start& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInit_DKGRaw(context, request, cq);
  result->StartCall();
  return result;
}

DKG_Start::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DKG_Start_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DKG_Start::Service, ::el_gamal::Start, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DKG_Start::Service* service,
             ::grpc::ServerContext* ctx,
             const ::el_gamal::Start* req,
             ::el_gamal::Response* resp) {
               return service->Init_DKG(ctx, req, resp);
             }, this)));
}

DKG_Start::Service::~Service() {
}

::grpc::Status DKG_Start::Service::Init_DKG(::grpc::ServerContext* context, const ::el_gamal::Start* request, ::el_gamal::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DKG_method_names[] = {
  "/el_gamal.DKG/Send_Commited_Shares",
  "/el_gamal.DKG/Send_Participant_PK",
};

std::unique_ptr< DKG::Stub> DKG::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DKG::Stub> stub(new DKG::Stub(channel, options));
  return stub;
}

DKG::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Send_Commited_Shares_(DKG_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_Participant_PK_(DKG_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DKG::Stub::Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::el_gamal::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::el_gamal::Commited_Share, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_Commited_Shares_, context, request, response);
}

void DKG::Stub::async::Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::el_gamal::Commited_Share, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Commited_Shares_, context, request, response, std::move(f));
}

void DKG::Stub::async::Send_Commited_Shares(::grpc::ClientContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Commited_Shares_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* DKG::Stub::PrepareAsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::el_gamal::Response, ::el_gamal::Commited_Share, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_Commited_Shares_, context, request);
}

::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* DKG::Stub::AsyncSend_Commited_SharesRaw(::grpc::ClientContext* context, const ::el_gamal::Commited_Share& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSend_Commited_SharesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DKG::Stub::Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::el_gamal::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::el_gamal::Participant_Public_Key, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_Participant_PK_, context, request, response);
}

void DKG::Stub::async::Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::el_gamal::Participant_Public_Key, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Participant_PK_, context, request, response, std::move(f));
}

void DKG::Stub::async::Send_Participant_PK(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_Participant_PK_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* DKG::Stub::PrepareAsyncSend_Participant_PKRaw(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::el_gamal::Response, ::el_gamal::Participant_Public_Key, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_Participant_PK_, context, request);
}

::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* DKG::Stub::AsyncSend_Participant_PKRaw(::grpc::ClientContext* context, const ::el_gamal::Participant_Public_Key& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSend_Participant_PKRaw(context, request, cq);
  result->StartCall();
  return result;
}

DKG::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DKG_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DKG::Service, ::el_gamal::Commited_Share, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DKG::Service* service,
             ::grpc::ServerContext* ctx,
             const ::el_gamal::Commited_Share* req,
             ::el_gamal::Response* resp) {
               return service->Send_Commited_Shares(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DKG_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DKG::Service, ::el_gamal::Participant_Public_Key, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DKG::Service* service,
             ::grpc::ServerContext* ctx,
             const ::el_gamal::Participant_Public_Key* req,
             ::el_gamal::Response* resp) {
               return service->Send_Participant_PK(ctx, req, resp);
             }, this)));
}

DKG::Service::~Service() {
}

::grpc::Status DKG::Service::Send_Commited_Shares(::grpc::ServerContext* context, const ::el_gamal::Commited_Share* request, ::el_gamal::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DKG::Service::Send_Participant_PK(::grpc::ServerContext* context, const ::el_gamal::Participant_Public_Key* request, ::el_gamal::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* TEG_method_names[] = {
  "/el_gamal.TEG/InitDecryption",
};

std::unique_ptr< TEG::Stub> TEG::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TEG::Stub> stub(new TEG::Stub(channel, options));
  return stub;
}

TEG::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InitDecryption_(TEG_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TEG::Stub::InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::el_gamal::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::el_gamal::Ciphertext, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitDecryption_, context, request, response);
}

void TEG::Stub::async::InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::el_gamal::Ciphertext, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitDecryption_, context, request, response, std::move(f));
}

void TEG::Stub::async::InitDecryption(::grpc::ClientContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitDecryption_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* TEG::Stub::PrepareAsyncInitDecryptionRaw(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::el_gamal::Response, ::el_gamal::Ciphertext, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitDecryption_, context, request);
}

::grpc::ClientAsyncResponseReader< ::el_gamal::Response>* TEG::Stub::AsyncInitDecryptionRaw(::grpc::ClientContext* context, const ::el_gamal::Ciphertext& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitDecryptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

TEG::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEG_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEG::Service, ::el_gamal::Ciphertext, ::el_gamal::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEG::Service* service,
             ::grpc::ServerContext* ctx,
             const ::el_gamal::Ciphertext* req,
             ::el_gamal::Response* resp) {
               return service->InitDecryption(ctx, req, resp);
             }, this)));
}

TEG::Service::~Service() {
}

::grpc::Status TEG::Service::InitDecryption(::grpc::ServerContext* context, const ::el_gamal::Ciphertext* request, ::el_gamal::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace el_gamal

