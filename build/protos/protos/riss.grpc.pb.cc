// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/riss.proto

#include "protos/riss.pb.h"
#include "protos/riss.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace riss {

static const char* RISS_method_names[] = {
  "/riss.RISS/SendShare",
  "/riss.RISS/SendR",
  "/riss.RISS/SendShamirShare",
};

std::unique_ptr< RISS::Stub> RISS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RISS::Stub> stub(new RISS::Stub(channel, options));
  return stub;
}

RISS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendShare_(RISS_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendR_(RISS_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendShamirShare_(RISS_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RISS::Stub::SendShare(::grpc::ClientContext* context, const ::riss::Share& request, ::riss::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::riss::Share, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendShare_, context, request, response);
}

void RISS::Stub::async::SendShare(::grpc::ClientContext* context, const ::riss::Share* request, ::riss::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::riss::Share, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendShare_, context, request, response, std::move(f));
}

void RISS::Stub::async::SendShare(::grpc::ClientContext* context, const ::riss::Share* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendShare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::riss::Response>* RISS::Stub::PrepareAsyncSendShareRaw(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::riss::Response, ::riss::Share, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendShare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::riss::Response>* RISS::Stub::AsyncSendShareRaw(::grpc::ClientContext* context, const ::riss::Share& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendShareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RISS::Stub::SendR(::grpc::ClientContext* context, const ::riss::R& request, ::riss::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::riss::R, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendR_, context, request, response);
}

void RISS::Stub::async::SendR(::grpc::ClientContext* context, const ::riss::R* request, ::riss::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::riss::R, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendR_, context, request, response, std::move(f));
}

void RISS::Stub::async::SendR(::grpc::ClientContext* context, const ::riss::R* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::riss::Response>* RISS::Stub::PrepareAsyncSendRRaw(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::riss::Response, ::riss::R, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendR_, context, request);
}

::grpc::ClientAsyncResponseReader< ::riss::Response>* RISS::Stub::AsyncSendRRaw(::grpc::ClientContext* context, const ::riss::R& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendRRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RISS::Stub::SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::riss::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::riss::ShamirShare, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendShamirShare_, context, request, response);
}

void RISS::Stub::async::SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare* request, ::riss::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::riss::ShamirShare, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendShamirShare_, context, request, response, std::move(f));
}

void RISS::Stub::async::SendShamirShare(::grpc::ClientContext* context, const ::riss::ShamirShare* request, ::riss::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendShamirShare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::riss::Response>* RISS::Stub::PrepareAsyncSendShamirShareRaw(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::riss::Response, ::riss::ShamirShare, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendShamirShare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::riss::Response>* RISS::Stub::AsyncSendShamirShareRaw(::grpc::ClientContext* context, const ::riss::ShamirShare& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendShamirShareRaw(context, request, cq);
  result->StartCall();
  return result;
}

RISS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RISS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RISS::Service, ::riss::Share, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RISS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::riss::Share* req,
             ::riss::Response* resp) {
               return service->SendShare(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RISS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RISS::Service, ::riss::R, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RISS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::riss::R* req,
             ::riss::Response* resp) {
               return service->SendR(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RISS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RISS::Service, ::riss::ShamirShare, ::riss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RISS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::riss::ShamirShare* req,
             ::riss::Response* resp) {
               return service->SendShamirShare(ctx, req, resp);
             }, this)));
}

RISS::Service::~Service() {
}

::grpc::Status RISS::Service::SendShare(::grpc::ServerContext* context, const ::riss::Share* request, ::riss::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RISS::Service::SendR(::grpc::ServerContext* context, const ::riss::R* request, ::riss::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RISS::Service::SendShamirShare(::grpc::ServerContext* context, const ::riss::ShamirShare* request, ::riss::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace riss

