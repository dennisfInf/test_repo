from Compiler.ecc import *
from Compiler.check_shares import *
program.set_bit_length(379)
program.use_edabit(True)


c0_x = sint(82880964554155060968058988597350052730497730984538265890575141115562772176918179231644785555604124690042588341405)
c0_y = sint(1832948954988490013737434417250266760760839761443110856810560225278810111078117841746227868466168131764287634914205)





p1_x = sint(3306438959699465971719480722444934504890239717337208370332574000022009189359329913109825133315187633248592012659454)
p1_y = sint(4501680639550662289664800609761598832030873523754449833313848383372218233346692432223376575739678370969264983548496)

p2_x = sint(1713599480534716791951058059739276335861154209529663831236138304794630894042358359646021107610197053770661367113547)
p2_y = sint(2479963624066198503180566621015692611423459317360468100980101193802983962738205600834303956064343381137664210258904)
points = sint.Tensor([2,3,1])
points[0][0][0] = p1_x
points[0][1][0] = p1_y
points[0][2][0] = sint(1)

points[1][0][0] = p2_x
points[1][1][0] = p2_y
points[1][2][0] = sint(1)

scalars = regint.Tensor([2,382])
s1 = cint(2)
s2 = cint(5541245505022739011583672869577435255026888277144126952448297309161979278754528049907713682488818304329661351460876)
multi_res_x = sint(5468784702587415954299465737220284731157455605633784667368636878967200180667681566444980128570714175235440493193222)
multi_res_y = sint(5122795716342239753136636463084229658092496247363811973788100039823887352864239787481185900330492907655978296135481)


print_ln("test points %s" ,points[0].reveal())
print_ln("test points %s", points[1].reveal())


scalars[0] = get_bits_lsb_first(s1,382)
scalars[1] = get_bits_lsb_first(s2,382)

print_ln("scalar 1: %s", scalars[0].reveal())
print_ln("scalar 2: %s", scalars[1].reveal())

calc_mul_exp = multi_exp_shamir_method(points,scalars)
calc_mul_exp_norm = norm_point_with_y(calc_mul_exp[0],calc_mul_exp[1],calc_mul_exp[2]) 

@if_e((calc_mul_exp_norm[0][0].reveal()==multi_res_x.reveal()) & (calc_mul_exp_norm[1][0].reveal()==multi_res_y.reveal()))
def _():
    print_ln("mul exp success")
@else_
def _():
    print_ln("mul exp failed")

plaintext =  add_points_bernstein(c0_x,c0_y,sint(1), calc_mul_exp_norm[0], -calc_mul_exp_norm[1],sint(1))
x_arr = norm_point(plaintext[0],plaintext[2])
print_ln("address %s",x_arr.reveal())



